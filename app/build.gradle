import org.ajoberstar.grgit.Grgit

import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'io.gitlab.arturbosch.detekt'
    id 'com.github.triplet.play' version '2.8.0'
}

if (file("google-services.json").canRead()) {
    apply plugin: 'com.google.gms.google-services'
    println("Build with Firebase support.")
} else {
    println("Build without Firebase support.")
}
apply plugin: 'com.google.firebase.crashlytics'

ext {
    // https://github.com/krzema12/fsynth/issues/53#issuecomment-622530487
    def repo = Grgit.open(Collections.singletonMap("currentDir", project.rootDir))
    def head = repo.head()
    def tags = repo.tag.list().findAll { it.commit == head }
    if (tags.size() > 1) {
        def errorStr = "More than one tag: "
        tags.each { item ->
            errorStr += item.name + ", "
        }
        errorStr = errorStr.substring(0, errorStr.length() - 2)
        throw new IllegalArgumentException(errorStr)
    } else if (tags.size() == 1) {
        def currentTag = tags[0].name
        assert currentTag ==~ '^v[0-9]+[.][0-9]+.[0-9]+$'

        calculatedVersionName = currentTag.substring(1) // remove leading "v"
    } else {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmm")
        calculatedVersionName = formatter.format(new Date())
    }
    // use last versionCode
    calculatedVersionCode = repo.tag
            .list()
            .findAll { it.name ==~ '^v[0-9]+[.][0-9]+.[0-9]+$' }
            .size()

    println("versionCode: " + calculatedVersionCode + ", versionName: " + calculatedVersionName)
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "ch.pete.appconfigapp"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode calculatedVersionCode
        versionName calculatedVersionName

        setProperty("archivesBaseName", "AppConfigApp_" + versionName + "-" + versionCode)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
        }
        release {
            storeFile file('../release.keystore')
            keyAlias "app"

            // read key password from external file
            file("../signing.properties").with { propFile ->
                if (propFile.canRead()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storePassword properties['keyPassword']
                    keyPassword properties['keyPassword']
                } else {
                    throw new IllegalArgumentException('Unable to read signing.properties')
                }
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        // see also kotlinOptions.allWarningsAsErrors below
        warningsAsErrors true
        abortOnError true
        ignore "ContentDescription", "Overdraw"
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
    namespace 'ch.pete.appconfigapp'
}

play {
    enabled = System.getenv("ANDROID_PUBLISHER_CREDENTIALS") != null
    defaultToAppBundles = true
    track = "internal"
    releaseStatus = "draft"
}

dependencies {
    api "com.jakewharton.timber:timber:5.0.1"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.3.1'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.room:room-runtime:2.4.3'
    implementation 'androidx.room:room-ktx:2.4.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'com.github.Android-library-copy-dependencies:SwipeRevealLayout:1.5.2'

    kapt 'androidx.room:room-compiler:2.4.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testImplementation "org.assertj:assertj-core:3.18.1"
    testImplementation 'org.mockito:mockito-inline:3.2.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.28'
    testImplementation "com.nhaarman:mockito-kotlin:1.6.0"
    testImplementation 'androidx.room:room-testing:2.4.3'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.allWarningsAsErrors = true
}

tasks.register('updateManifestQueries') {
    doLast {
        // read from Gist
        final String appConfigAppQueryAuthoritiesUrl = "https://gist.githubusercontent.com/PRosenb/2e8ad7f073999a352e467a15f6d0b93f/raw/AppConfigAppQueryAuthorities.txt"
        ant.get(src: appConfigAppQueryAuthoritiesUrl, dest: new File('build/queries.txt'))

        final List<String> queriesList = new File("app/build/queries.txt").text.readLines()
        String queries = "<queries>\n"
        for (def query : queriesList) {
            queries += "        <provider android:authorities=\"" + query + "\"/>\n"
        }
        ant.replaceregexp(match: '<queries>', replace: queries, flags: 'g', byline: true) {
            fileset(dir: 'src/main', includes: 'AndroidManifest.xml')
        }
    }
}

detekt {
    // fail build on any finding
    failFast = true
    // preconfigure defaults
    buildUponDefaultConfig = true
    config = files("$projectDir/../config/detekt.yml")

    reports {
        // observe findings in your browser with structure and code snippets
        html.enabled = true
        // checkstyle like format mainly for integrations like Jenkins
        xml.enabled = false
        // similar to the console output, contains issue signature to manually edit baseline files
        txt.enabled = false
    }
}
